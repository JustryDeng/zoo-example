demo:0000 2024-08-11 13:39:45.142 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 13:39:45.175 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 16168 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 13:39:45.175 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 13:39:46.624 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:39:46.633 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:39:47.270 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:39:48.532 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 13:39:48.830 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 13:39:48.831 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 13:39:49.029 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 13:39:49.237 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@798b36fd
demo:0000 2024-08-11 13:39:49.238 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 13:39:50.539 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 13:39:50.558 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport': Injection of resource dependencies failed
demo:0000 2024-08-11 13:39:50.559 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 13:39:50.565 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 13:39:50.566 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 13:39:50.568 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 13:39:50.582 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 13:39:50.624 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport': Injection of resource dependencies failed
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:303)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1397)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties' available: expected single matching bean but found 2: com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties,spring.shardingsphere.rules.sharding-com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:218)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1325)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:490)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:467)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:618)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:242)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:300)
	... 94 common frames omitted
demo:0000 2024-08-11 13:39:50.650 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@1dbfbd94]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@3ccc4ca0 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@c430e6c, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@70cf32e3, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@6f204a1a, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@25df00a0, org.springframework.boot.test.context.SpringBootTestAnnotation@3980a529], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport': Injection of resource dependencies failed
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:303)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1397)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties' available: expected single matching bean but found 2: com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties,spring.shardingsphere.rules.sharding-com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.RulesShardingProperties
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:218)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1325)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:490)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:467)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:618)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:242)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:300)
	... 94 common frames omitted
demo:0000 2024-08-11 13:56:21.181 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 13:56:21.202 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 26328 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 13:56:21.204 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 13:56:30.638 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:56:30.646 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:56:31.155 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:56:32.097 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 13:56:32.319 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 13:56:32.320 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 13:56:32.475 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 13:56:32.587 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@395197cb
demo:0000 2024-08-11 13:56:32.588 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 13:57:25.109 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 13:57:25.132 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 23448 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 13:57:25.133 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 13:57:26.330 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:57:26.340 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:57:26.817 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 13:57:27.681 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 13:57:27.927 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 13:57:27.929 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 13:57:28.085 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 13:57:28.197 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@67c2b55d
demo:0000 2024-08-11 13:57:28.197 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 13:57:29.126 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 13:57:29.867 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 13:57:30.142 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 13:57:30.153 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 13:57:30.159 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 13:57:30.161 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 13:57:30.402 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 13:57:30.425 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.765 seconds (process running for 6.942)
demo:0000 2024-08-11 13:57:31.911 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 13:57:31.911 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 13:57:31.913 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822512649850867714, 1822512649850867715, 2023-05-06, 备注A]
demo:0000 2024-08-11 13:57:31.947 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 13:57:31.947 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 13:57:31.947 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822512653671878658, 1822512649850867714, 2023-05-06, 2.5]
demo:0000 2024-08-11 13:57:31.953 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 13:57:31.953 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 13:57:31.954 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822512653671878659, 张三]
demo:0000 2024-08-11 13:57:31.968 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 13:57:31.968 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 13:57:31.968 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 13:57:31.973 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 13:57:31.974 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 13:57:31.974 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 13:57:31.979 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 13:57:31.979 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 13:57:31.979 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 13:57:31.986 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 13:57:31.986 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 13:57:31.986 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822512649850867714, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 13:57:31.992 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 13:57:31.993 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 13:57:31.993 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822512649850867714, 1822512649850867715, 2023-05-06, 备注A]
demo:0000 2024-08-11 13:57:32.084 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 13:57:32.086 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 13:57:32.087 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 13:57:32.088 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 14:00:24.223 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 14:00:24.247 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 14716 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 14:00:24.248 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 14:00:25.455 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:00:25.465 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:00:26.018 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:00:26.977 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 14:00:27.205 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 14:00:27.207 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 14:00:27.343 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 14:00:27.450 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@25e796fe
demo:0000 2024-08-11 14:00:27.451 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 14:00:28.400 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 14:00:29.112 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 14:00:29.247 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 14:00:29.255 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 14:00:29.260 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 14:00:29.261 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 14:00:29.426 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 14:00:29.442 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.61 seconds (process running for 6.724)
demo:0000 2024-08-11 14:00:30.488 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.488 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.489 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513399519801346, 1822513399519801345, 2023-05-06, 备注A]
demo:0000 2024-08-11 14:00:30.522 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.522 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.523 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402678112258, 1822513402678112259, 2023-05-06, 2.5]
demo:0000 2024-08-11 14:00:30.528 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:00:30.528 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.528 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513402678112260, 张三]
demo:0000 2024-08-11 14:00:30.539 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 14:00:30.541 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:00:30.542 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 14:00:30.547 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 14:00:30.548 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:00:30.548 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 14:00:30.552 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 14:00:30.553 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:00:30.555 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 14:00:30.565 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.565 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.566 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402812329986, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 14:00:30.570 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.570 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.571 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402875244546, 1822513399519801345, 2023-05-06, 备注A]
demo:0000 2024-08-11 14:00:30.575 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.576 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.576 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402875244547, 1822513402875244548, 2023-05-06, 2.5]
demo:0000 2024-08-11 14:00:30.582 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:00:30.583 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.583 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513399519801345, 张三]
demo:0000 2024-08-11 14:00:30.588 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.588 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.589 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402942353409, 1822513402942353410, 2023-06-06, 备注B]
demo:0000 2024-08-11 14:00:30.594 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.594 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.595 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513402942353411, 1822513402942353409, 2023-06-06, 8.3]
demo:0000 2024-08-11 14:00:30.598 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.600 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.600 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513403005267970, 1822513402942353409, 2023-07-06, 8.4]
demo:0000 2024-08-11 14:00:30.603 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:00:30.604 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.605 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513403005267971, 1822513402942353409, 2023-10-06, 8.5]
demo:0000 2024-08-11 14:00:30.609 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:00:30.610 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:00:30.610 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513402942353410, 李四]
demo:0000 2024-08-11 14:00:30.652 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 14:00:30.654 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 14:00:30.655 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 14:00:30.656 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 14:02:11.464 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 14:02:11.493 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 4560 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 14:02:11.494 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 14:02:12.743 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:02:12.750 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:02:13.329 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 14:02:14.352 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 14:02:14.550 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 14:02:14.552 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 14:02:14.714 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 14:02:14.832 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@40b01718
demo:0000 2024-08-11 14:02:14.833 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 14:02:15.961 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 14:02:16.776 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 14:02:16.934 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 14:02:16.944 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 14:02:16.950 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 14:02:16.952 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 14:02:17.191 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 14:02:17.217 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 6.227 seconds (process running for 7.46)
demo:0000 2024-08-11 14:02:18.473 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.474 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.474 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513851938426883, 1822513851938426882, 2023-05-06, 备注A]
demo:0000 2024-08-11 14:02:18.503 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.504 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.504 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855587471362, 1822513855587471363, 2023-05-06, 2.5]
demo:0000 2024-08-11 14:02:18.511 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:02:18.512 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.512 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513855587471364, 张三]
demo:0000 2024-08-11 14:02:18.524 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 14:02:18.525 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:02:18.525 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 14:02:18.535 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 14:02:18.536 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:02:18.536 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 14:02:18.541 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 14:02:18.541 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 14:02:18.542 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 14:02:18.550 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.551 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.552 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855780409346, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 14:02:18.556 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.557 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.557 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855780409347, 1822513851938426882, 2023-05-06, 备注A]
demo:0000 2024-08-11 14:02:18.562 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.562 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.563 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855780409348, 1822513855780409349, 2023-05-06, 2.5]
demo:0000 2024-08-11 14:02:18.567 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:02:18.567 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.567 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513851938426882, 张三]
demo:0000 2024-08-11 14:02:18.571 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.571 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.571 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855847518210, 1822513855847518211, 2023-06-06, 备注B]
demo:0000 2024-08-11 14:02:18.574 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.575 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.575 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855847518212, 1822513855847518210, 2023-06-06, 8.3]
demo:0000 2024-08-11 14:02:18.579 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.579 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.579 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855910432769, 1822513855847518210, 2023-07-06, 8.4]
demo:0000 2024-08-11 14:02:18.583 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 14:02:18.583 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.584 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822513855910432770, 1822513855847518210, 2023-10-06, 8.5]
demo:0000 2024-08-11 14:02:18.587 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 14:02:18.587 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 14:02:18.587 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822513855847518211, 李四]
demo:0000 2024-08-11 14:02:18.686 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 14:02:18.687 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 14:02:18.688 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 14:02:18.790 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 14:02:18.793 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 14:02:18.795 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 14:02:18.796 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:50:35.962 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:50:35.985 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 8384 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:50:35.985 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:50:37.147 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:50:37.155 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:50:37.623 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:50:38.605 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:50:38.821 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:50:38.823 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:50:38.972 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:50:39.112 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 15:50:39.113 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:50:40.087 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 15:50:40.745 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 15:50:40.862 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 15:50:40.868 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 15:50:40.872 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 15:50:40.874 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 15:50:41.085 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 15:50:41.099 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.55 seconds (process running for 6.729)
demo:0000 2024-08-11 15:50:42.258 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.259 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.259 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822541131133784066, 1822541131133784065, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:50:42.294 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.294 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.295 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134396952578, 1822541134396952579, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:50:42.300 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:50:42.300 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.300 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822541134459867137, 张三]
demo:0000 2024-08-11 15:50:42.316 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 15:50:42.316 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:50:42.316 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 15:50:42.325 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 15:50:42.325 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:50:42.327 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 15:50:42.332 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 15:50:42.333 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:50:42.333 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 15:50:42.341 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.342 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.342 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134656999426, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 15:50:42.348 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.349 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.349 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134656999427, 1822541131133784065, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:50:42.353 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.354 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.355 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134719913986, 1822541134719913987, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:50:42.359 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:50:42.360 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.360 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822541131133784065, 张三]
demo:0000 2024-08-11 15:50:42.365 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.365 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.365 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134719913988, 1822541134719913989, 2023-06-06, 备注B]
demo:0000 2024-08-11 15:50:42.369 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.370 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.370 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134787022849, 1822541134719913988, 2023-06-06, 8.3]
demo:0000 2024-08-11 15:50:42.373 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.374 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.374 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134787022850, 1822541134719913988, 2023-07-06, 8.4]
demo:0000 2024-08-11 15:50:42.376 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:50:42.377 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.377 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822541134787022851, 1822541134719913988, 2023-10-06, 8.5]
demo:0000 2024-08-11 15:50:42.381 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:50:42.381 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:50:42.382 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822541134719913989, 李四]
demo:0000 2024-08-11 15:50:42.498 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:50:42.499 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 15:50:42.499 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:50:42.638 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:50:42.643 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:50:42.644 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:50:42.646 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:51:04.375 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:51:04.408 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 4312 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:51:04.410 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:51:05.914 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:05.920 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:06.510 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:07.548 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:51:07.838 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:51:07.840 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:51:08.000 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:51:08.166 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 15:51:08.166 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:51:19.790 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 15:51:26.428 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:51:26.453 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 30644 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:51:26.454 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:51:27.680 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:27.688 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:28.172 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:51:29.208 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:51:29.470 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:51:29.471 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:51:29.614 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:51:29.727 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1d008e61
demo:0000 2024-08-11 15:51:29.728 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:51:31.342 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.376 seconds (process running for 6.509)
demo:0000 2024-08-11 15:53:05.536 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=1m35s698ms731µs400ns).
demo:0000 2024-08-11 15:53:05.536 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m35s950ms817µs300ns).
demo:0000 2024-08-11 15:53:05.699 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:53:05.708 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:53:05.709 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:53:05.710 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:53:36.680 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:53:36.707 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 30396 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:53:36.708 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:53:38.126 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:53:38.136 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:53:38.753 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:53:39.779 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:53:39.999 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:53:40.001 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:53:40.153 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:53:40.268 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@43df1377
demo:0000 2024-08-11 15:53:40.269 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:53:41.935 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.74 seconds (process running for 6.849)
demo:0000 2024-08-11 15:53:54.281 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:53:54.290 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:53:54.291 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:53:54.293 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:55:46.328 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:55:46.353 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 21712 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:55:46.354 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:55:47.602 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:55:47.615 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:55:48.134 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:55:49.148 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:55:49.337 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:55:49.339 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:55:49.491 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:55:49.615 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5521407f
demo:0000 2024-08-11 15:55:49.616 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:55:50.708 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 15:55:51.547 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 15:55:51.835 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 15:55:51.849 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 15:55:51.856 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 15:55:51.860 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 15:55:52.108 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 15:55:52.124 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 6.204 seconds (process running for 7.364)
demo:0000 2024-08-11 15:55:53.323 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.323 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.323 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822542435872698370, 1822542435872698369, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:55:53.354 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.354 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.354 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439123283970, 1822542439123283971, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:55:53.359 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:55:53.360 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.360 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822542439123283972, 张三]
demo:0000 2024-08-11 15:55:53.371 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 15:55:53.373 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:55:53.373 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 15:55:53.377 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 15:55:53.377 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:55:53.377 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 15:55:53.381 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 15:55:53.381 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:55:53.381 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 15:55:53.390 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.390 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.390 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439253307394, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 15:55:53.395 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.397 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.397 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439316221954, 1822542435872698369, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:55:53.400 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.401 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.402 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439316221955, 1822542439316221956, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:55:53.406 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:55:53.407 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.407 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822542435872698369, 张三]
demo:0000 2024-08-11 15:55:53.412 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.413 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.413 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439383330817, 1822542439383330818, 2023-06-06, 备注B]
demo:0000 2024-08-11 15:55:53.419 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.419 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.420 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439383330819, 1822542439383330817, 2023-06-06, 8.3]
demo:0000 2024-08-11 15:55:53.424 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.424 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.425 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439450439681, 1822542439383330817, 2023-07-06, 8.4]
demo:0000 2024-08-11 15:55:53.429 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:55:53.429 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.430 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822542439450439682, 1822542439383330817, 2023-10-06, 8.5]
demo:0000 2024-08-11 15:55:53.434 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:55:53.434 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:55:53.435 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822542439383330818, 李四]
demo:0000 2024-08-11 15:55:53.560 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:55:53.562 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 15:55:53.564 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:55:53.717 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:55:53.721 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:55:53.722 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:55:53.723 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:56:53.894 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:56:53.918 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 7564 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:56:53.920 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:56:55.121 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:56:55.128 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:56:55.593 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:56:56.600 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:56:56.809 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:56:56.812 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:56:56.941 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:56:57.047 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2d2133fd
demo:0000 2024-08-11 15:56:57.047 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:58:01.893 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=1m4s737ms215µs500ns).
demo:0000 2024-08-11 15:58:01.894 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m4s972ms335µs300ns).
demo:0000 2024-08-11 15:58:01.904 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 15:58:02.418 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 15:58:02.517 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 15:58:02.523 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 15:58:02.527 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 15:58:02.528 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 15:58:02.702 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 15:58:02.714 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 69.302 seconds (process running for 70.732)
demo:0000 2024-08-11 15:58:03.761 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:58:03.764 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:58:03.765 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:58:03.765 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 15:58:56.114 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 15:58:56.140 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 37436 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 15:58:56.142 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 15:58:57.460 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:58:57.473 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:58:58.034 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 15:58:58.974 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 15:58:59.224 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 15:58:59.227 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 15:58:59.395 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 15:58:59.510 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@51cd2d2
demo:0000 2024-08-11 15:58:59.510 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 15:59:03.121 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 15:59:03.660 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 15:59:03.761 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 15:59:03.767 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 15:59:03.770 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 15:59:03.772 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 15:59:03.958 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 15:59:03.975 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 8.278 seconds (process running for 9.521)
demo:0000 2024-08-11 15:59:05.213 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.213 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.213 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543240164020227, 1822543240164020226, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:59:05.245 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.245 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.246 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543243972448257, 1822543243972448258, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:59:05.252 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:59:05.252 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.253 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543243972448259, 张三]
demo:0000 2024-08-11 15:59:05.267 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 15:59:05.268 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:59:05.269 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 15:59:05.274 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 15:59:05.275 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:59:05.275 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 15:59:05.281 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 15:59:05.281 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 15:59:05.282 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 15:59:05.291 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.292 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.292 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244165386241, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 15:59:05.297 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.297 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.298 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244165386242, 1822543240164020226, 2023-05-06, 备注A]
demo:0000 2024-08-11 15:59:05.303 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.304 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.305 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244228300802, 1822543244228300803, 2023-05-06, 2.5]
demo:0000 2024-08-11 15:59:05.310 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:59:05.310 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.311 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543240164020226, 张三]
demo:0000 2024-08-11 15:59:05.316 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.317 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.317 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244299603970, 1822543244299603971, 2023-06-06, 备注B]
demo:0000 2024-08-11 15:59:05.321 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.321 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.321 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244299603972, 1822543244299603970, 2023-06-06, 8.3]
demo:0000 2024-08-11 15:59:05.326 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.326 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.326 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244299603973, 1822543244299603970, 2023-07-06, 8.4]
demo:0000 2024-08-11 15:59:05.330 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 15:59:05.330 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.331 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543244299603974, 1822543244299603970, 2023-10-06, 8.5]
demo:0000 2024-08-11 15:59:05.336 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 15:59:05.336 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 15:59:05.337 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543244299603971, 李四]
demo:0000 2024-08-11 15:59:05.459 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:59:05.459 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 15:59:05.460 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 15:59:05.585 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 15:59:05.588 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 15:59:05.590 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 15:59:05.591 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:01:38.483 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:01:38.508 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 39328 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:01:38.509 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:01:39.698 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:39.705 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:40.255 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:41.228 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:01:41.482 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:01:41.484 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:01:41.660 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:01:41.775 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5521407f
demo:0000 2024-08-11 16:01:41.785 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:01:42.776 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:01:43.463 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:01:43.592 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:01:43.600 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:01:43.605 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:01:43.606 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 16:01:43.791 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 16:01:43.807 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.723 seconds (process running for 6.818)
demo:0000 2024-08-11 16:01:44.984 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:44.984 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:44.984 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543910678040579, 1822543910678040578, 2023-05-06, 备注A]
demo:0000 2024-08-11 16:01:45.009 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.011 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.011 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914071232514, 1822543914071232515, 2023-05-06, 2.5]
demo:0000 2024-08-11 16:01:45.016 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:01:45.016 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.016 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543914071232516, 张三]
demo:0000 2024-08-11 16:01:45.027 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 16:01:45.028 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:01:45.028 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 16:01:45.032 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 16:01:45.034 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:01:45.034 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 16:01:45.037 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 16:01:45.037 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:01:45.039 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 16:01:45.047 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.047 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.047 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914201255938, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 16:01:45.052 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.053 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.055 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914268364801, 1822543910678040578, 2023-05-06, 备注A]
demo:0000 2024-08-11 16:01:45.060 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.061 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.062 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914268364802, 1822543914268364803, 2023-05-06, 2.5]
demo:0000 2024-08-11 16:01:45.066 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:01:45.066 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.067 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543910678040578, 张三]
demo:0000 2024-08-11 16:01:45.072 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.072 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.073 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914335473665, 1822543914335473666, 2023-06-06, 备注B]
demo:0000 2024-08-11 16:01:45.077 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.077 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.078 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914335473667, 1822543914335473665, 2023-06-06, 8.3]
demo:0000 2024-08-11 16:01:45.082 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.082 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.083 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914398388225, 1822543914335473665, 2023-07-06, 8.4]
demo:0000 2024-08-11 16:01:45.087 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:01:45.087 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.087 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543914398388226, 1822543914335473665, 2023-10-06, 8.5]
demo:0000 2024-08-11 16:01:45.091 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:01:45.092 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:01:45.092 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543914335473666, 李四]
demo:0000 2024-08-11 16:01:45.210 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 16:01:45.211 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 16:01:45.212 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 16:01:45.324 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:01:45.328 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:01:45.329 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:01:45.331 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:01:54.357 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:01:54.382 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 11772 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:01:54.383 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:01:55.661 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:55.669 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:56.240 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:01:57.215 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:01:57.465 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:01:57.467 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:01:57.625 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:01:57.730 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6e78177b
demo:0000 2024-08-11 16:01:57.731 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:01:58.849 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:01:59.599 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:01:59.768 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:01:59.777 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:01:59.783 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:01:59.784 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 16:02:00.018 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 16:02:00.036 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 6.108 seconds (process running for 7.248)
demo:0000 2024-08-11 16:02:01.290 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.290 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.291 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543979074551810, 1822543979074551809, 2023-05-06, 备注A]
demo:0000 2024-08-11 16:02:01.323 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.323 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.324 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982480326657, 1822543982480326658, 2023-05-06, 2.5]
demo:0000 2024-08-11 16:02:01.330 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:02:01.330 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.330 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543982539046914, 张三]
demo:0000 2024-08-11 16:02:01.348 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 16:02:01.349 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:02:01.349 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 16:02:01.354 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 16:02:01.355 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:02:01.355 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 16:02:01.361 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 16:02:01.361 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 16:02:01.362 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 16:02:01.369 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.370 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.372 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982673264642, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 16:02:01.376 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.377 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.377 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982740373506, 1822543979074551809, 2023-05-06, 备注A]
demo:0000 2024-08-11 16:02:01.382 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.383 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.383 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982740373507, 1822543982740373508, 2023-05-06, 2.5]
demo:0000 2024-08-11 16:02:01.388 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:02:01.389 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.389 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543979074551809, 张三]
demo:0000 2024-08-11 16:02:01.394 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.394 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.395 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982803288066, 1822543982803288067, 2023-06-06, 备注B]
demo:0000 2024-08-11 16:02:01.400 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.400 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.400 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982803288068, 1822543982803288066, 2023-06-06, 8.3]
demo:0000 2024-08-11 16:02:01.405 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.405 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.406 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982870396930, 1822543982803288066, 2023-07-06, 8.4]
demo:0000 2024-08-11 16:02:01.410 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 16:02:01.410 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.410 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822543982870396931, 1822543982803288066, 2023-10-06, 8.5]
demo:0000 2024-08-11 16:02:01.415 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 16:02:01.416 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 16:02:01.416 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822543982803288067, 李四]
demo:0000 2024-08-11 16:02:01.569 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 16:02:01.570 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 16:02:01.570 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 16:02:01.712 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:02:01.717 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:02:01.718 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:02:01.720 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:06:35.869 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:06:35.894 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 23548 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:06:35.894 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:06:37.149 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:06:37.158 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:06:37.623 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:06:38.670 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:06:38.908 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:06:38.910 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:06:39.052 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:06:39.166 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3b64f131
demo:0000 2024-08-11 16:06:39.166 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:06:40.202 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shardingTableSupport' defined in class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ZooShardingsphereAutoConfiguration.class]: Unsatisfied dependency expressed through method 'shardingTableSupport' parameter 0: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
demo:0000 2024-08-11 16:06:40.203 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:06:40.214 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:06:40.215 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:06:40.218 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:06:40.235 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:06:40.287 ERROR [] main o.s.b.diagnostics.LoggingFailureAnalysisReporter:40 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of method shardingTableSupport in com.ideaaedi.zoo.diy.artifact.shardingsphere.ZooShardingsphereAutoConfiguration required a bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs' that could not be found.


Action:

Consider defining a bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs' in your configuration.

demo:0000 2024-08-11 16:06:40.300 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@7dda5b25]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@6bbb3280 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shardingTableSupport' defined in class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ZooShardingsphereAutoConfiguration.class]: Unsatisfied dependency expressed through method 'shardingTableSupport' parameter 0: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1161)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1812)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1371)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1325)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 96 common frames omitted
demo:0000 2024-08-11 16:09:13.929 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:09:13.961 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 9720 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:09:13.962 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:09:15.235 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:15.246 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:15.855 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:17.020 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:09:17.290 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:09:17.293 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:09:17.534 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:09:17.677 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1cee3e05
demo:0000 2024-08-11 16:09:17.678 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:09:18.785 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:09:19.640 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:09:19.674 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
java.util.NoSuchElementException: null
	at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:758)
	at java.base/java.util.LinkedHashMap$LinkedValueIterator.next(LinkedHashMap.java:783)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:252)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 16:09:19.680 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:09:19.694 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:09:19.696 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:09:19.698 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:09:19.708 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@3ae91bcc]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@4f63909f testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: java.util.NoSuchElementException: null
	at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:758)
	at java.base/java.util.LinkedHashMap$LinkedValueIterator.next(LinkedHashMap.java:783)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:252)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
demo:0000 2024-08-11 16:09:40.574 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:09:40.602 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 33172 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:09:40.603 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:09:41.851 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:41.859 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:42.386 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:09:43.501 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:09:43.829 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:09:43.831 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:09:43.994 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:09:44.149 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 16:09:44.149 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:09:45.089 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:11:07.047 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m23s115ms331µs800ns).
demo:0000 2024-08-11 16:11:07.047 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=1m22s785ms553µs500ns).
demo:0000 2024-08-11 16:11:07.063 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:11:07.089 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
java.util.NoSuchElementException: null
	at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:758)
	at java.base/java.util.LinkedHashMap$LinkedValueIterator.next(LinkedHashMap.java:783)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:252)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 16:11:07.091 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:11:07.097 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:11:07.097 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:11:07.098 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:11:34.688 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:11:34.716 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 38476 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:11:34.717 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:11:36.207 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:11:36.219 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:11:36.766 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:11:37.846 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:11:38.163 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:11:38.166 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:11:38.370 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:11:38.483 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 16:11:38.484 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:11:39.565 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shardingTableSupport' defined in class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ZooShardingsphereAutoConfiguration.class]: Unsatisfied dependency expressed through method 'shardingTableSupport' parameter 0: Error creating bean with name 'spring.shardingsphere-com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties': Could not bind properties to 'ShardingDatasourceProperties' : prefix=spring.shardingsphere, ignoreInvalidFields=false, ignoreUnknownFields=true
demo:0000 2024-08-11 16:11:39.566 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:11:39.578 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:11:39.580 INFO  [] main com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:11:39.581 INFO  [] main com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:11:39.600 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:11:39.649 ERROR [] main o.s.b.diagnostics.LoggingFailureAnalysisReporter:40 

***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to bind properties under 'spring.shardingsphere.datasource.names' to com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs:

    Reason: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs]

Action:

Update your application's configuration

demo:0000 2024-08-11 16:11:39.665 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@2178d296]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@7a7bb083 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shardingTableSupport' defined in class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ZooShardingsphereAutoConfiguration.class]: Unsatisfied dependency expressed through method 'shardingTableSupport' parameter 0: Error creating bean with name 'spring.shardingsphere-com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties': Could not bind properties to 'ShardingDatasourceProperties' : prefix=spring.shardingsphere, ignoreInvalidFields=false, ignoreUnknownFields=true
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1161)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
Caused by: org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'spring.shardingsphere-com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties': Could not bind properties to 'ShardingDatasourceProperties' : prefix=spring.shardingsphere, ignoreInvalidFields=false, ignoreUnknownFields=true
	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:99)
	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:79)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1743)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1405)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1325)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 96 common frames omitted
Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'spring.shardingsphere.datasource.names' to com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs
	at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:387)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:347)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$1(Binder.java:435)
	at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:561)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:436)
	at org.springframework.boot.context.properties.bind.AggregateElementBinder.bind(AggregateElementBinder.java:39)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.lambda$bindEntries$0(MapBinder.java:158)
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1220)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.bindEntries(MapBinder.java:158)
	at org.springframework.boot.context.properties.bind.MapBinder.bindAggregate(MapBinder.java:69)
	at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$3(Binder.java:438)
	at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:590)
	at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:438)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:399)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:343)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$4(Binder.java:472)
	at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:98)
	at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:86)
	at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:62)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$5(Binder.java:476)
	at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:590)
	at org.springframework.boot.context.properties.bind.Binder$Context.withDataObject(Binder.java:576)
	at org.springframework.boot.context.properties.bind.Binder.bindDataObject(Binder.java:474)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:414)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:343)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:332)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:262)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:249)
	at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:93)
	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:96)
	... 110 common frames omitted
Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [com.ideaaedi.zoo.diy.artifact.shardingsphere.entity.DatasourceArgs]
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:118)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:100)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:92)
	at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:459)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:403)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:343)
	... 139 common frames omitted
demo:0000 2024-08-11 16:20:22.648 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:20:22.671 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 36252 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:20:22.672 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:20:23.828 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:20:23.836 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:20:24.303 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:20:25.293 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:20:25.471 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:20:25.473 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:20:25.641 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:20:25.756 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@36120a8b
demo:0000 2024-08-11 16:20:25.756 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:20:26.636 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:22:33.253 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=2m7s396ms68µs300ns).
demo:0000 2024-08-11 16:22:33.253 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m7s679ms527µs300ns).
demo:0000 2024-08-11 16:22:33.260 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:22:33.361 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:22:33.367 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:22:33.369 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:22:33.373 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:22:33.376 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:22:33.376 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:22:33.377 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:22:33.377 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:23:48.857 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:23:48.896 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 24744 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:23:48.897 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:23:50.393 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:23:50.402 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:23:50.991 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:23:52.157 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:23:52.468 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:23:52.470 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:23:52.654 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:23:52.816 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@47d81427
demo:0000 2024-08-11 16:23:52.825 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:23:54.001 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:26:10.677 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m18s93ms884µs900ns).
demo:0000 2024-08-11 16:26:10.677 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=2m17s751ms494µs700ns).
demo:0000 2024-08-11 16:26:10.689 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:26:23.923 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:26:23.949 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 6792 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:26:23.950 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:26:25.448 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:26:25.457 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:26:26.048 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:26:27.014 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:26:27.262 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:26:27.264 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:26:27.493 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:26:27.639 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5db04bd2
demo:0000 2024-08-11 16:26:27.640 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:26:28.722 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:27:16.883 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=49s508ms971µs400ns).
demo:0000 2024-08-11 16:27:16.883 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=49s134ms726µs200ns).
demo:0000 2024-08-11 16:27:16.889 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:27:16.986 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:27:16.992 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:27:16.997 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:27:17.001 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:27:17.008 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:27:17.009 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:27:17.010 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:27:17.012 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:29:03.459 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:29:03.485 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 33604 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:29:03.486 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:29:05.008 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:05.030 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:05.626 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:06.851 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:29:07.130 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:29:07.132 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:29:07.280 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:29:07.425 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 16:29:07.426 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:29:08.654 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:29:23.080 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:29:23.176 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:29:23.182 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:29:23.185 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:29:23.188 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:29:23.195 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:29:23.197 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:29:23.197 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:29:23.198 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:29:35.478 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:29:35.507 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 19912 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:29:35.507 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:29:37.002 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:37.011 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:37.585 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:29:38.704 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:29:38.948 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:29:38.950 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:29:39.121 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:29:39.244 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1cee3e05
demo:0000 2024-08-11 16:29:39.244 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:29:40.318 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 16:29:46.240 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 16:29:46.333 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 16:29:46.339 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 16:29:46.344 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 16:29:46.347 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 16:29:46.354 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 16:29:46.355 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 16:29:46.355 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 16:29:46.356 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 16:33:08.827 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 16:33:08.865 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 38992 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 16:33:08.867 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 16:33:10.262 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:33:10.274 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:33:10.894 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 16:33:11.933 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 16:33:12.267 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 16:33:12.270 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 16:33:12.478 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 16:33:12.607 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@391b01c5
demo:0000 2024-08-11 16:33:12.608 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 16:33:13.595 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:09:57.523 WARN  [] HikariPool-1 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=36m45s141ms229µs500ns).
demo:0000 2024-08-11 17:09:57.523 WARN  [] HikariPool-2 housekeeper com.zaxxer.hikari.pool.HikariPool:804 HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=36m44s813ms356µs500ns).
demo:0000 2024-08-11 17:09:57.529 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `msg_exec_log_202408` (
     `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
     `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
     `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息的年月日',
     `msg_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息 id',
     `curr_expect_exec_time` datetime NOT NULL COMMENT '触发本次执行的期望执行时间',
     `actual_exec_time` datetime NOT NULL COMMENT '实际执行时间',
     `consume_time` int(10) NOT NULL COMMENT '耗时（毫秒）',
     `exec_if_success` tinyint(1) NULL DEFAULT NULL COMMENT '执行是否成功（仅代表执行这个动作是否成功；0-失败；1-成功）',
     `exec_result` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行结果',
     `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
     `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
     `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
     `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
     `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
     PRIMARY KEY (`id`) USING BTREE,
     INDEX `status_idx`(`status` ASC) USING BTREE,
     INDEX `tenant_idx`(`tenant` ASC) USING BTREE,
     INDEX `msg_id_idx`(`msg_id` ASC) USING BTREE,
     INDEX `exec_if_success_idx`(`exec_if_success` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息执行日志' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_message_202408`  (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `root_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '根消息 id（0表示无）',
    `parent_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0 COMMENT '父消息 id（0表示无）',
    `msg_type` tinyint(1) NOT NULL COMMENT '消息类型(0-即时消息; 1-定时消息)',
    `msg_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息标题',
    `msg_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
    `msg_content_tags` json NULL COMMENT '消息内容标签',
    `msg_content_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容格式',
    `time_to_live` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '消息过期时间(单位秒; 0-永不过期)',
    `generate_time` datetime NULL DEFAULT NULL COMMENT '业务端产生消息的时间',
    `receive_time` datetime NOT NULL COMMENT '消息中心接收到消息的时间',
    `save_time` datetime NOT NULL COMMENT '消息中心保存消息的时间',
    `expect_exec_time` json NULL COMMENT '预期消息中心消费消息的时间',
    `state` tinyint(2) NOT NULL DEFAULT 0 COMMENT '消息状态（负数表示执行前状态，正数表示执行后状态：-3-草稿态；-2-已失效；-1-已过期；0-待执行；1-执行成功；2-执行失败；3-执行中）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `root_id_idx`(`root_id` ASC) USING BTREE,
    INDEX `parent_id_idx`(`parent_id` ASC) USING BTREE,
    INDEX `msg_type_idx`(`msg_type` ASC) USING BTREE,
    INDEX `time_to_live_idx`(`time_to_live` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `msg_from_to_202408` (
    `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
    `tenant` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '租户（以特定的dept_path作为租户值）',
    `yyyy_mm_dd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '年月日',
    `from_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方类型',
    `from_user_id` bigint(20) NULL DEFAULT NULL COMMENT '发送方用户id',
    `to_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收放类型',
    `to_user_phone` bigint(20) NULL DEFAULT NULL COMMENT '接收方为：此用户的手机号',
    `to_phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接收方：此电话号码',
    `state` tinyint(1) NULL DEFAULT NULL COMMENT '交互状态（-1-已失效；0-待发送；1-已发送，发送成功；2-已发送，发送失败；3-已发送，结果未知）',
    `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '数据状态(0-无效；1-有效)',
    `created_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人',
    `created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
    `updated_by` bigint(20) NULL DEFAULT NULL COMMENT '修改人',
    `updated_at` datetime NULL DEFAULT NULL COMMENT '修改时间',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX `status_idx`(`status` ASC) USING BTREE,
    INDEX `from_type_idx`(`from_type` ASC) USING BTREE,
    INDEX `to_type_idx`(`to_type` ASC) USING BTREE,
    INDEX `state_idx`(`state` ASC) USING BTREE,
    INDEX `tenant_idx`(`tenant` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '消息交互方' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 17:09:57.642 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"]}
demo:0000 2024-08-11 17:09:57.648 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"]}
demo:0000 2024-08-11 17:09:57.653 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:174 initRealTableName -> {"msg_exec_log":["msg_exec_log_202408"],"msg_message":["msg_message_202408"],"msg_from_to":["msg_from_to_202408"]}
demo:0000 2024-08-11 17:09:57.654 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {msg_message=ds0.${['msg_message_202408']}, msg_exec_log=ds0.${['msg_exec_log_202408']}, msg_from_to=ds0.${['msg_from_to_202408']}}
demo:0000 2024-08-11 17:09:57.789 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:119 Get children JDBC data by key: /metadata/logic_db/schemas/logic_db/views failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:104)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.ViewMetaDataPersistService.load(ViewMetaDataPersistService.java:50)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$newShardingSphereSchemas$18(ContextManager.java:435)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.manager.ContextManager.newShardingSphereSchemas(ContextManager.java:434)
	at org.apache.shardingsphere.mode.manager.ContextManager.createChangedDatabases(ContextManager.java:423)
	at org.apache.shardingsphere.mode.manager.ContextManager.createMetaDataContexts(ContextManager.java:403)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:343)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:118)
		... 98 common frames omitted
demo:0000 2024-08-11 17:09:57.793 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:119 Get children JDBC data by key: /sys_data failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:104)
	at org.apache.shardingsphere.mode.metadata.persist.data.ShardingSphereDataPersistService.load(ShardingSphereDataPersistService.java:52)
	at java.base/java.util.Optional.flatMap(Optional.java:289)
	at org.apache.shardingsphere.mode.metadata.MetaDataContexts.initShardingSphereData(MetaDataContexts.java:49)
	at org.apache.shardingsphere.mode.metadata.MetaDataContexts.<init>(MetaDataContexts.java:45)
	at org.apache.shardingsphere.mode.manager.ContextManager.newMetaDataContexts(ContextManager.java:429)
	at org.apache.shardingsphere.mode.manager.ContextManager.createMetaDataContexts(ContextManager.java:407)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:343)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:118)
		... 98 common frames omitted
demo:0000 2024-08-11 17:09:57.802 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:95 Get JDBC data by key: /metadata/logic_db/schemas/logic_db/tables/pay_record failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:87)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.isExisted(JDBCRepository.java:126)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:132)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:94)
		... 101 common frames omitted
demo:0000 2024-08-11 17:09:57.804 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:95 Get JDBC data by key: /metadata failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:87)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:142)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:94)
		... 100 common frames omitted
demo:0000 2024-08-11 17:09:57.805 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:154 Persist JDBC data to key: /metadata/logic_db/schemas/logic_db/tables/pay_record failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.insert(JDBCRepository.java:161)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:147)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.insert(JDBCRepository.java:167)
		... 100 common frames omitted
demo:0000 2024-08-11 17:09:57.808 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:95 Get JDBC data by key: /metadata/logic_db/schemas/logic_db/tables/trans_record failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:87)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.isExisted(JDBCRepository.java:126)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:132)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:94)
		... 101 common frames omitted
demo:0000 2024-08-11 17:09:57.810 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:95 Get JDBC data by key: /metadata failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:87)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:142)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getDirectly(JDBCRepository.java:94)
		... 100 common frames omitted
demo:0000 2024-08-11 17:09:57.810 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:154 Persist JDBC data to key: /metadata/logic_db/schemas/logic_db/tables/trans_record failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.insert(JDBCRepository.java:161)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.persist(JDBCRepository.java:147)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.lambda$persist$0(TableMetaDataPersistService.java:44)
	at java.base/java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1603)
	at org.apache.shardingsphere.mode.metadata.persist.service.schema.TableMetaDataPersistService.persist(TableMetaDataPersistService.java:44)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.persist(DatabaseMetaDataPersistService.java:125)
	at org.apache.shardingsphere.mode.manager.ContextManager.lambda$alterSchemaMetaData$16(ContextManager.java:328)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterSchemaMetaData(ContextManager.java:328)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:344)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.insert(JDBCRepository.java:167)
		... 100 common frames omitted
demo:0000 2024-08-11 17:09:57.812 ERROR [] main o.a.s.m.repository.standalone.jdbc.JDBCRepository:119 Get children JDBC data by key: /metadata/logic_db/schemas failed
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:104)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.loadAllSchemaNames(DatabaseMetaDataPersistService.java:154)
	at org.apache.shardingsphere.mode.metadata.persist.service.DatabaseMetaDataPersistService.loadSchemas(DatabaseMetaDataPersistService.java:146)
	at org.apache.shardingsphere.mode.manager.ContextManager.newShardingSphereDatabase(ContextManager.java:443)
	at org.apache.shardingsphere.mode.manager.ContextManager.alterRuleConfiguration(ContextManager.java:346)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.updateShardRuleActualDataNodes(RefreshActualDataNodesSupport.java:245)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.RefreshActualDataNodesSupport.refresh(RefreshActualDataNodesSupport.java:156)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.refreshActualDataNodes(LocalCacheShardingTableSupport.java:338)
	at com.ideaaedi.zoo.diy.artifact.shardingsphere.support.LocalCacheShardingTableSupport.afterSingletonsInstantiated(LocalCacheShardingTableSupport.java:309)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:972)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
		at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
		at org.h2.message.DbException.get(DbException.java:223)
		at org.h2.message.DbException.get(DbException.java:199)
		at org.h2.message.DbException.get(DbException.java:188)
		at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
		at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
		at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
		at org.apache.shardingsphere.mode.repository.standalone.jdbc.JDBCRepository.getChildrenKeys(JDBCRepository.java:118)
		... 95 common frames omitted
demo:0000 2024-08-11 17:09:57.814 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:09:57.827 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 2209.421 seconds (process running for 2210.671)
demo:0000 2024-08-11 17:09:57.830 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:09:57.831 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:09:57.832 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:09:57.832 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 17:09:57.836 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:31:57.567 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:31:57.585 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 16272 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:31:57.585 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:31:58.584 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:31:58.592 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:31:59.075 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:31:59.926 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:32:00.142 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:32:00.144 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:32:00.307 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:32:00.429 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@40b01718
demo:0000 2024-08-11 17:32:00.429 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:32:01.719 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:32:02.384 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> [CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;, CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;]
demo:0000 2024-08-11 17:32:02.539 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 17:32:02.546 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 17:32:02.546 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 17:32:02.547 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 17:32:02.845 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:32:02.860 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.713 seconds (process running for 6.725)
demo:0000 2024-08-11 17:32:04.208 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.209 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.209 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822566640240648195, 1822566640240648194, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:32:04.240 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.241 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.241 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822566643994550273, 1822566643994550274, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:32:04.248 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:32:04.249 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.249 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822566643994550275, 张三]
demo:0000 2024-08-11 17:32:04.260 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 17:32:04.260 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:32:04.261 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 17:32:04.265 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 17:32:04.266 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:32:04.266 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 17:32:04.270 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 17:32:04.270 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:32:04.271 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 17:32:04.279 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.279 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.279 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644120379393, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 17:32:04.284 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.285 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.285 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644187488257, 1822566640240648194, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:32:04.289 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.290 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.290 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644187488258, 1822566644187488259, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:32:04.294 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:32:04.295 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.295 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822566640240648194, 张三]
demo:0000 2024-08-11 17:32:04.298 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.299 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.300 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644187488260, 1822566644187488261, 2023-06-06, 备注B]
demo:0000 2024-08-11 17:32:04.305 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.306 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.306 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644254597122, 1822566644187488260, 2023-06-06, 8.3]
demo:0000 2024-08-11 17:32:04.310 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.310 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.310 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644254597123, 1822566644187488260, 2023-07-06, 8.4]
demo:0000 2024-08-11 17:32:04.315 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:32:04.316 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.317 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822566644317511681, 1822566644187488260, 2023-10-06, 8.5]
demo:0000 2024-08-11 17:32:04.321 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:32:04.321 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:32:04.321 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822566644187488261, 李四]
demo:0000 2024-08-11 17:32:04.443 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:32:04.443 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 17:32:04.444 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:32:04.606 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:32:04.612 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:32:04.613 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:32:04.614 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:38:48.861 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:38:48.890 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 20040 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:38:48.891 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:38:49.855 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:38:49.863 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:38:50.306 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:38:51.232 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:38:51.427 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:38:51.429 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:38:51.586 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:38:51.709 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@516b84d1
demo:0000 2024-08-11 17:38:51.710 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:38:52.989 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:38:53.561 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;
CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 17:38:53.781 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 17:38:53.794 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 17:38:53.795 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 17:38:53.797 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 17:38:54.086 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:38:54.105 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.673 seconds (process running for 6.708)
demo:0000 2024-08-11 17:38:55.424 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.425 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.426 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568364829425667, 1822568364829425666, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:38:55.454 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.454 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.455 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568368755294210, 1822568368755294211, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:38:55.460 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:38:55.460 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.461 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568368755294212, 张三]
demo:0000 2024-08-11 17:38:55.472 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 17:38:55.473 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:38:55.473 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 17:38:55.479 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 17:38:55.479 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:38:55.479 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 17:38:55.484 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 17:38:55.484 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:38:55.485 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 17:38:55.493 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.494 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.494 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568368885317633, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 17:38:55.498 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.499 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.499 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568368885317634, 1822568364829425666, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:38:55.505 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.506 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.506 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568368948232193, 1822568368948232194, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:38:55.510 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:38:55.511 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.511 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568364829425666, 张三]
demo:0000 2024-08-11 17:38:55.516 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.517 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.517 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568369015341058, 1822568369015341059, 2023-06-06, 备注B]
demo:0000 2024-08-11 17:38:55.522 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.522 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.522 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568369015341060, 1822568369015341058, 2023-06-06, 8.3]
demo:0000 2024-08-11 17:38:55.527 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.528 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.528 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568369015341061, 1822568369015341058, 2023-07-06, 8.4]
demo:0000 2024-08-11 17:38:55.534 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:38:55.534 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.535 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568369078255618, 1822568369015341058, 2023-10-06, 8.5]
demo:0000 2024-08-11 17:38:55.540 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:38:55.541 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:38:55.541 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568369015341059, 李四]
demo:0000 2024-08-11 17:38:55.708 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:38:55.709 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 17:38:55.710 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:38:55.835 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:38:55.839 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:38:55.840 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:38:55.841 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:39:49.965 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:39:50.008 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 23432 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:39:50.009 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:39:51.295 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:39:51.308 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:39:51.811 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:39:52.826 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:39:53.008 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:39:53.010 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:39:53.153 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:39:53.259 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1be52113
demo:0000 2024-08-11 17:39:53.259 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:39:54.617 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:39:55.135 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 

CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 17:39:55.229 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 17:39:55.236 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 17:39:55.236 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 17:39:55.237 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 17:39:55.469 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:39:55.484 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.982 seconds (process running for 7.361)
demo:0000 2024-08-11 17:39:56.733 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.734 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.734 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568621914980355, 1822568621914980354, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:39:56.767 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.767 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.767 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568625878597634, 1822568625878597635, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:39:56.775 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:39:56.775 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.776 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568625945706497, 张三]
demo:0000 2024-08-11 17:39:56.794 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 17:39:56.795 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:39:56.795 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 17:39:56.802 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 17:39:56.803 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:39:56.803 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 17:39:56.809 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 17:39:56.810 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:39:56.810 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 17:39:56.822 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.822 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.822 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626084118530, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 17:39:56.828 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.829 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.829 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626151227393, 1822568621914980354, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:39:56.834 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.836 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.836 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626151227394, 1822568626151227395, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:39:56.842 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:39:56.842 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.843 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568621914980354, 张三]
demo:0000 2024-08-11 17:39:56.849 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.849 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.850 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626218336258, 1822568626218336259, 2023-06-06, 备注B]
demo:0000 2024-08-11 17:39:56.855 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.856 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.857 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626272862209, 1822568626218336258, 2023-06-06, 8.3]
demo:0000 2024-08-11 17:39:56.861 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.862 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.863 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626272862210, 1822568626218336258, 2023-07-06, 8.4]
demo:0000 2024-08-11 17:39:56.868 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:39:56.870 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.871 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822568626331582466, 1822568626218336258, 2023-10-06, 8.5]
demo:0000 2024-08-11 17:39:56.876 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:39:56.876 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:39:56.877 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822568626218336259, 李四]
demo:0000 2024-08-11 17:39:57.050 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:39:57.051 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 17:39:57.052 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:39:57.208 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:39:57.215 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:39:57.216 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:39:57.217 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:41:29.407 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:41:29.427 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 23192 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:41:29.429 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:41:30.450 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:41:30.459 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:41:30.886 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:41:31.690 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:41:31.864 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:41:31.865 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:41:31.998 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:41:32.090 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4822ab4d
demo:0000 2024-08-11 17:41:32.091 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:41:33.249 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:41:33.910 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 17:41:34.038 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 17:41:34.047 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 17:41:34.048 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 17:41:34.049 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 17:41:34.309 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:41:34.326 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.305 seconds (process running for 6.342)
demo:0000 2024-08-11 17:41:35.549 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.550 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.551 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822569036874346499, 1822569036874346498, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:41:35.587 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.587 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.588 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040343035906, 1822569040343035907, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:41:35.594 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:41:35.594 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.594 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822569040405950465, 张三]
demo:0000 2024-08-11 17:41:35.610 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 17:41:35.610 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:41:35.611 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 17:41:35.617 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 17:41:35.618 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:41:35.618 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 17:41:35.624 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 17:41:35.625 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:41:35.625 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 17:41:35.634 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.635 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.635 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040535973890, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 17:41:35.640 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.640 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.641 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040598888450, 1822569036874346498, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:41:35.645 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.646 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.646 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040598888451, 1822569040598888452, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:41:35.650 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:41:35.651 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.651 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822569036874346498, 张三]
demo:0000 2024-08-11 17:41:35.655 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.656 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.656 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040665997314, 1822569040665997315, 2023-06-06, 备注B]
demo:0000 2024-08-11 17:41:35.661 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.661 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.661 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040665997316, 1822569040665997314, 2023-06-06, 8.3]
demo:0000 2024-08-11 17:41:35.666 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.667 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.667 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040733106177, 1822569040665997314, 2023-07-06, 8.4]
demo:0000 2024-08-11 17:41:35.672 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:41:35.672 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.673 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822569040733106178, 1822569040665997314, 2023-10-06, 8.5]
demo:0000 2024-08-11 17:41:35.677 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:41:35.678 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:41:35.679 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822569040665997315, 李四]
demo:0000 2024-08-11 17:41:35.839 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:41:35.840 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 17:41:35.841 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:41:35.964 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:41:35.968 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:41:35.969 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:41:35.971 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:47:05.847 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:47:05.876 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 29636 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:47:05.877 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:47:55.683 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:47:55.694 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:47:56.152 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:48:00.453 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:48:00.620 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:48:00.621 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:48:00.767 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:48:00.878 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1c9975a8
demo:0000 2024-08-11 17:48:00.879 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:48:04.520 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:48:05.009 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 17:48:05.202 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 17:48:05.210 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 17:48:05.211 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 17:48:05.213 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 17:48:05.444 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 17:48:05.464 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 60.081 seconds (process running for 61.237)
demo:0000 2024-08-11 17:48:06.638 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.639 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.639 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822570677509816322, 1822570677509816321, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:48:06.671 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.671 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.672 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822570680722653186, 1822570680722653187, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:48:06.676 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:48:06.676 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.676 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822570680722653188, 张三]
demo:0000 2024-08-11 17:48:06.693 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 17:48:06.693 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:48:06.696 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 17:48:06.703 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 17:48:06.703 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:48:06.705 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 17:48:06.709 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 17:48:06.709 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 17:48:06.710 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 17:48:06.719 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.720 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.720 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822570680915591170, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 17:48:06.726 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.726 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.727 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822570680915591171, 1822570677509816321, 2023-05-06, 备注A]
demo:0000 2024-08-11 17:48:06.732 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.733 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.734 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822570680982700033, 1822570680982700034, 2023-05-06, 2.5]
demo:0000 2024-08-11 17:48:06.737 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:48:06.738 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.738 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822570677509816321, 张三]
demo:0000 2024-08-11 17:48:06.742 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.743 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.743 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822570680982700035, 1822570680982700036, 2023-06-06, 备注B]
demo:0000 2024-08-11 17:48:06.747 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.747 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.747 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822570681045614593, 1822570680982700035, 2023-06-06, 8.3]
demo:0000 2024-08-11 17:48:06.751 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.751 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.751 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822570681045614594, 1822570680982700035, 2023-07-06, 8.4]
demo:0000 2024-08-11 17:48:06.754 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 17:48:06.755 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.756 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822570681045614595, 1822570680982700035, 2023-10-06, 8.5]
demo:0000 2024-08-11 17:48:06.760 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 17:48:06.761 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 17:48:06.761 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822570680982700036, 李四]
demo:0000 2024-08-11 17:48:06.887 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:48:06.888 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 17:48:06.889 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 17:48:07.034 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 17:48:07.040 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 17:48:07.041 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 17:48:07.042 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 17:56:43.307 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 17:56:43.331 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 27472 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 17:56:43.331 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 17:56:45.028 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:56:45.049 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:56:45.782 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 17:56:46.838 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 17:56:47.128 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 17:56:47.131 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 17:56:47.399 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 17:56:47.593 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1c9975a8
demo:0000 2024-08-11 17:56:47.593 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 17:56:53.551 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 17:57:02.417 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 18:05:47.661 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:05:47.687 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 12788 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:05:47.688 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:05:49.116 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:05:49.126 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:05:49.676 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:05:51.034 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 18:05:51.257 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 18:05:51.258 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 18:05:51.407 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 18:05:51.533 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@78508e6b
demo:0000 2024-08-11 18:05:51.534 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 18:05:52.582 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 18:05:53.246 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 18:05:53.495 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 18:05:53.507 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 18:05:53.509 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 18:05:53.511 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 18:05:53.862 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 18:05:53.883 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 6.756 seconds (process running for 8.024)
demo:0000 2024-08-11 18:05:55.474 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.474 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.474 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822575159375314946, 1822575159375314945, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:05:55.518 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.519 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.519 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822575163775139842, 1822575163775139843, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:05:55.529 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:05:55.529 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.530 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822575163775139844, 张三]
demo:0000 2024-08-11 18:05:55.548 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 18:05:55.549 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:05:55.549 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 18:05:55.555 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 18:05:55.555 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:05:55.555 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 18:05:55.560 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 18:05:55.561 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:05:55.561 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 18:05:55.570 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.570 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.571 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822575163972272130, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 18:05:55.577 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.578 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.578 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164035186689, 1822575159375314945, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:05:55.583 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.583 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.583 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164035186690, 1822575164035186691, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:05:55.589 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:05:55.590 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.590 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822575159375314945, 张三]
demo:0000 2024-08-11 18:05:55.595 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.596 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.596 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164102295554, 1822575164102295555, 2023-06-06, 备注B]
demo:0000 2024-08-11 18:05:55.601 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.602 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.602 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164102295556, 1822575164102295554, 2023-06-06, 8.3]
demo:0000 2024-08-11 18:05:55.607 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.608 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.608 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164165210114, 1822575164102295554, 2023-07-06, 8.4]
demo:0000 2024-08-11 18:05:55.615 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:05:55.615 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.616 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822575164165210115, 1822575164102295554, 2023-10-06, 8.5]
demo:0000 2024-08-11 18:05:55.621 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:05:55.622 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:05:55.622 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822575164102295555, 李四]
demo:0000 2024-08-11 18:05:55.797 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:05:55.798 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 18:05:55.799 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:05:55.923 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 18:05:55.932 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 18:05:55.934 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 18:05:55.940 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 18:12:20.588 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:12:20.614 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 12712 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:12:20.615 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:12:21.762 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:12:21.774 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:12:22.323 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:12:23.186 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'shardingSphereDataSource' defined in class path resource [org/apache/shardingsphere/spring/boot/ShardingSphereAutoConfiguration.class]: Failed to instantiate [javax.sql.DataSource]: Factory method 'shardingSphereDataSource' threw exception with message: Error creating bean with name 'shardingRuleConfiguration' defined in class path resource [org/apache/shardingsphere/sharding/spring/boot/ShardingRuleSpringBootConfiguration.class]: Failed to instantiate [org.apache.shardingsphere.infra.config.rule.RuleConfiguration]: Factory method 'shardingRuleConfiguration' threw exception with message: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
demo:0000 2024-08-11 18:12:23.207 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 18:12:23.256 ERROR [] main o.s.b.diagnostics.LoggingFailureAnalysisReporter:40 

***************************
APPLICATION FAILED TO START
***************************

Description:

Method shardingRuleConfiguration in org.apache.shardingsphere.sharding.spring.boot.ShardingRuleSpringBootConfiguration required a bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties' that could not be found.


Action:

Consider defining a bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties' in your configuration.

demo:0000 2024-08-11 18:12:23.269 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@740c4868]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@722b2728 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'shardingSphereDataSource' defined in class path resource [org/apache/shardingsphere/spring/boot/ShardingSphereAutoConfiguration.class]: Failed to instantiate [javax.sql.DataSource]: Factory method 'shardingSphereDataSource' threw exception with message: Error creating bean with name 'shardingRuleConfiguration' defined in class path resource [org/apache/shardingsphere/sharding/spring/boot/ShardingRuleSpringBootConfiguration.class]: Failed to instantiate [org.apache.shardingsphere.infra.config.rule.RuleConfiguration]: Factory method 'shardingRuleConfiguration' threw exception with message: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1161)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'shardingSphereDataSource' threw exception with message: Error creating bean with name 'shardingRuleConfiguration' defined in class path resource [org/apache/shardingsphere/sharding/spring/boot/ShardingRuleSpringBootConfiguration.class]: Failed to instantiate [org.apache.shardingsphere.infra.config.rule.RuleConfiguration]: Factory method 'shardingRuleConfiguration' threw exception with message: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'shardingRuleConfiguration' defined in class path resource [org/apache/shardingsphere/sharding/spring/boot/ShardingRuleSpringBootConfiguration.class]: Failed to instantiate [org.apache.shardingsphere.infra.config.rule.RuleConfiguration]: Factory method 'shardingRuleConfiguration' threw exception with message: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1161)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1621)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1585)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1476)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1363)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfAvailable(DefaultListableBeanFactory.java:2044)
	at org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration.shardingSphereDataSource(ShardingSphereAutoConfiguration.java:90)
	at org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0.CGLIB$shardingSphereDataSource$3(<generated>)
	at org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0.shardingSphereDataSource(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 97 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shardingsphere.infra.config.rule.RuleConfiguration]: Factory method 'shardingRuleConfiguration' threw exception with message: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 123 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'trans-date-algorithm': Injection of resource dependencies failed
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:303)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1397)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1621)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1585)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1363)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfAvailable(DefaultListableBeanFactory.java:2044)
	at org.apache.shardingsphere.sharding.spring.boot.ShardingRuleSpringBootConfiguration.shardingRuleConfiguration(ShardingRuleSpringBootConfiguration.java:71)
	at org.apache.shardingsphere.sharding.spring.boot.ShardingRuleSpringBootConfiguration$$SpringCGLIB$$0.CGLIB$shardingRuleConfiguration$0(<generated>)
	at org.apache.shardingsphere.sharding.spring.boot.ShardingRuleSpringBootConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.apache.shardingsphere.sharding.spring.boot.ShardingRuleSpringBootConfiguration$$SpringCGLIB$$0.shardingRuleConfiguration(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 124 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.ideaaedi.zoo.diy.artifact.shardingsphere.properties.ShardingDatasourceProperties' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@jakarta.annotation.Resource(shareable=true, lookup="", name="", description="", authenticationType=CONTAINER, type=java.lang.Object.class, mappedName="")}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1812)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1371)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1325)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:490)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:467)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:618)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:242)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:300)
	... 148 common frames omitted
demo:0000 2024-08-11 18:21:33.423 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:21:33.443 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 29248 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:21:33.444 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:21:36.542 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:21:36.552 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:21:57.035 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:21:57.068 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 36108 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:21:57.069 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:32:10.949 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:32:10.958 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:32:17.491 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:32:17.523 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 22380 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:32:17.524 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:32:18.642 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:32:18.655 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:32:19.225 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:32:20.191 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 18:32:20.504 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 18:32:20.507 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 18:32:20.674 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 18:32:20.814 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@17a77a7e
demo:0000 2024-08-11 18:32:20.814 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 18:32:22.230 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.217 seconds (process running for 6.532)
demo:0000 2024-08-11 18:32:23.890 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:23.890 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:23.891 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822581821825978370, 1822581821825978369, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:32:23.924 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:23.925 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:23.926 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826041253889, 1822581826041253890, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:32:23.935 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:32:23.936 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:23.936 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822581826041253891, 张三]
demo:0000 2024-08-11 18:32:23.954 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 18:32:23.956 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:32:23.957 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 18:32:23.967 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 18:32:23.968 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:32:23.968 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 18:32:23.975 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 18:32:23.976 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:32:23.976 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 18:32:23.986 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:23.987 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:23.987 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826301300737, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 18:32:23.993 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:23.994 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:23.994 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826301300738, 1822581821825978369, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:32:23.999 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:24.000 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.000 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826368409602, 1822581826368409603, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:32:24.005 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:32:24.005 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.006 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822581821825978369, 张三]
demo:0000 2024-08-11 18:32:24.012 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:24.012 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.012 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826368409604, 1822581826368409605, 2023-06-06, 备注B]
demo:0000 2024-08-11 18:32:24.017 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:24.018 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.018 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826431324161, 1822581826368409604, 2023-06-06, 8.3]
demo:0000 2024-08-11 18:32:24.023 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:24.024 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.024 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826431324162, 1822581826368409604, 2023-07-06, 8.4]
demo:0000 2024-08-11 18:32:24.030 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:32:24.030 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.032 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822581826498433025, 1822581826368409604, 2023-10-06, 8.5]
demo:0000 2024-08-11 18:32:24.036 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:32:24.037 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:32:24.038 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822581826368409605, 李四]
demo:0000 2024-08-11 18:32:24.217 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:32:24.218 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 18:32:24.219 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:32:24.329 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 18:32:24.341 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 18:32:24.342 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 18:32:24.344 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 18:33:58.333 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:33:58.359 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 38888 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:33:58.360 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:33:59.510 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:33:59.520 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:34:00.093 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:34:00.973 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 18:34:01.262 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 18:34:01.265 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 18:34:01.392 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 18:34:01.505 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4cd90c36
demo:0000 2024-08-11 18:34:01.505 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 18:34:02.307 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 18:34:02.799 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 18:34:02.966 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 18:34:02.974 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 18:34:02.974 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 18:34:02.976 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 18:34:03.078 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 18:34:03.091 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.214 seconds (process running for 6.277)
demo:0000 2024-08-11 18:34:04.352 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.353 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.353 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822582243537981442, 1822582243537981441, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:34:04.388 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.388 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.389 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247405129729, 1822582247405129730, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:34:04.396 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:34:04.397 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.397 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822582247405129731, 张三]
demo:0000 2024-08-11 18:34:04.409 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 18:34:04.409 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:34:04.409 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 18:34:04.415 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 18:34:04.415 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:34:04.415 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 18:34:04.419 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 18:34:04.420 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:34:04.420 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 18:34:04.426 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.427 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.427 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247543541762, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 18:34:04.432 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.432 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.433 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247598067713, 1822582243537981441, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:34:04.438 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.439 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.440 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247598067714, 1822582247598067715, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:34:04.446 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:34:04.446 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.448 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822582243537981441, 张三]
demo:0000 2024-08-11 18:34:04.453 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.454 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.454 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247673565185, 1822582247673565186, 2023-06-06, 备注B]
demo:0000 2024-08-11 18:34:04.460 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.460 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.460 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247732285441, 1822582247673565185, 2023-06-06, 8.3]
demo:0000 2024-08-11 18:34:04.465 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.466 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.466 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247732285442, 1822582247673565185, 2023-07-06, 8.4]
demo:0000 2024-08-11 18:34:04.470 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:34:04.471 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.471 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822582247732285443, 1822582247673565185, 2023-10-06, 8.5]
demo:0000 2024-08-11 18:34:04.476 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:34:04.476 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:34:04.477 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822582247673565186, 李四]
demo:0000 2024-08-11 18:34:04.651 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:34:04.651 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 18:34:04.653 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:34:04.741 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 18:34:04.743 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 18:34:04.745 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 18:34:04.746 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 18:38:38.329 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:38:38.352 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 23304 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:38:38.353 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:38:39.296 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:38:39.301 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:38:39.764 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:38:40.690 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 18:38:40.909 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 18:38:40.911 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 18:38:41.036 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 18:38:41.148 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1aaaabd1
demo:0000 2024-08-11 18:38:41.148 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 18:38:41.864 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 18:38:42.299 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 18:38:42.406 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 18:38:42.413 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 18:38:42.413 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 18:38:42.414 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 18:38:42.472 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 18:38:42.486 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 4.589 seconds (process running for 5.667)
demo:0000 2024-08-11 18:38:43.728 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.730 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.730 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583415405559811, 1822583415405559810, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:38:43.759 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.761 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.761 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419151073281, 1822583419151073282, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:38:43.767 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:38:43.768 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.768 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583419218182145, 张三]
demo:0000 2024-08-11 18:38:43.781 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 18:38:43.781 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:38:43.782 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 18:38:43.785 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 18:38:43.785 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:38:43.785 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 18:38:43.789 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 18:38:43.789 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:38:43.790 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 18:38:43.796 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.796 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.796 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419348205570, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 18:38:43.800 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.800 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.801 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419348205571, 1822583415405559810, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:38:43.805 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.806 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.806 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419348205572, 1822583419348205573, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:38:43.810 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:38:43.810 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.811 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583415405559810, 张三]
demo:0000 2024-08-11 18:38:43.814 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.814 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.815 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419415314434, 1822583419415314435, 2023-06-06, 备注B]
demo:0000 2024-08-11 18:38:43.818 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.818 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.819 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419415314436, 1822583419415314434, 2023-06-06, 8.3]
demo:0000 2024-08-11 18:38:43.822 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.822 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.824 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419415314437, 1822583419415314434, 2023-07-06, 8.4]
demo:0000 2024-08-11 18:38:43.828 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:38:43.828 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.829 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583419482423297, 1822583419415314434, 2023-10-06, 8.5]
demo:0000 2024-08-11 18:38:43.833 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:38:43.834 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:38:43.834 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583419415314435, 李四]
demo:0000 2024-08-11 18:38:43.973 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:38:43.974 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 18:38:43.975 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:38:44.089 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 18:38:44.092 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 18:38:44.093 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 18:38:44.094 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 18:39:01.002 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:39:01.027 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 9572 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:39:01.028 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:39:02.022 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:39:02.029 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:39:02.512 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:39:03.326 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 18:39:03.595 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 18:39:03.597 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 18:39:03.715 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 18:39:03.819 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@303fbc4
demo:0000 2024-08-11 18:39:03.819 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 18:39:04.590 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 18:39:05.244 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 18:39:05.489 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 18:39:05.498 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 18:39:05.499 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 18:39:05.501 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 18:39:05.568 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 18:39:05.579 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.038 seconds (process running for 6.19)
demo:0000 2024-08-11 18:39:06.771 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.771 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.771 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583512377888770, 1822583512377888769, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:39:06.798 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.798 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.798 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583515804635138, 1822583515804635139, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:39:06.804 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:39:06.806 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.806 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583515804635140, 张三]
demo:0000 2024-08-11 18:39:06.823 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 18:39:06.823 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:39:06.824 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 18:39:06.829 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 18:39:06.830 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:39:06.832 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 18:39:06.837 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 18:39:06.837 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 18:39:06.838 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 18:39:06.847 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.848 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.848 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516010156034, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 18:39:06.853 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.853 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.854 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516010156035, 1822583512377888769, 2023-05-06, 备注A]
demo:0000 2024-08-11 18:39:06.859 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.861 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.861 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516073070594, 1822583516073070595, 2023-05-06, 2.5]
demo:0000 2024-08-11 18:39:06.866 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:39:06.866 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.867 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583512377888769, 张三]
demo:0000 2024-08-11 18:39:06.872 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.873 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.873 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516135985154, 1822583516135985155, 2023-06-06, 备注B]
demo:0000 2024-08-11 18:39:06.878 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.878 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.878 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516135985156, 1822583516135985154, 2023-06-06, 8.3]
demo:0000 2024-08-11 18:39:06.882 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.882 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.882 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516135985157, 1822583516135985154, 2023-07-06, 8.4]
demo:0000 2024-08-11 18:39:06.886 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 18:39:06.887 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.887 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822583516198899714, 1822583516135985154, 2023-10-06, 8.5]
demo:0000 2024-08-11 18:39:06.893 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 18:39:06.893 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 18:39:06.894 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822583516135985155, 李四]
demo:0000 2024-08-11 18:39:07.034 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:39:07.034 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 18:39:07.035 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 18:39:07.167 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 18:39:07.170 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 18:39:07.171 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 18:39:07.172 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 18:46:35.088 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:46:35.120 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 10532 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:46:35.122 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:46:38.681 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:46:38.694 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:46:52.619 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:46:52.648 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 28244 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:46:52.650 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:46:55.734 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:46:55.745 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 18:47:24.682 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:47:24.711 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 25708 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:47:24.712 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:47:54.176 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:47:54.215 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 17344 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:47:54.217 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:47:55.111 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ShardingsphereSwitchAutoConfiguration$SwitchShardingsphere.class]
demo:0000 2024-08-11 18:47:55.121 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 18:47:55.147 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ShardingsphereSwitchAutoConfiguration$SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 18:47:55.155 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@7b32b129]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@24386839 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration.SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/ShardingsphereSwitchAutoConfiguration$SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
demo:0000 2024-08-11 18:48:59.576 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:48:59.615 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 38588 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:48:59.615 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:49:00.372 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
demo:0000 2024-08-11 18:49:00.378 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 18:49:00.396 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 18:49:00.403 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@3a2d3909]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@4fd05028 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
demo:0000 2024-08-11 18:50:02.605 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:50:02.629 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 34552 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:50:02.630 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:50:03.345 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
demo:0000 2024-08-11 18:50:03.352 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 18:50:03.372 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 18:50:03.378 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@7b32b129]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@24386839 testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
demo:0000 2024-08-11 18:50:50.138 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 18:50:50.159 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 36844 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 18:50:50.160 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 18:50:50.714 WARN  [] main o.s.w.context.support.GenericWebApplicationContext:592 Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
demo:0000 2024-08-11 18:50:50.720 INFO  [] main o.s.b.a.logging.ConditionEvaluationReportLogger:82 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
demo:0000 2024-08-11 18:50:50.736 ERROR [] main org.springframework.boot.SpringApplication:820 Application run failed
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
demo:0000 2024-08-11 18:50:50.741 ERROR [] main o.springframework.test.context.TestContextManager:245 Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests@38c9e0d6]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@120d3fd testClass = com.ideaaedi.zoo.example.springboot.shardingsphere.ShardingTests, locations = [], classes = [com.ideaaedi.zoo.example.springboot.shardingsphere.ExampleSpringbootShardingsphereApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5b38c1ec, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1807e3f6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4d14b6c2, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@475c9c31, org.springframework.boot.test.context.SpringBootTestAnnotation@3baf781e], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'SwitchShardingsphere' to import class 'ShardingsphereSwitchAutoConfiguration' as 'ShardingsphereSwitchAutoConfiguration' is already present in the current import stack [SwitchShardingsphere->SwitchShardingsphere->ShardingsphereSwitchAutoConfiguration->ShardingsphereSwitchAutoConfiguration->ExampleSpringbootShardingsphereApplication]
Offending resource: class path resource [com/ideaaedi/zoo/diy/artifact/shardingsphere/config/SwitchShardingsphere.class]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:72)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(ConfigurationClassParser.java:679)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:492)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:304)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243)
	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:514)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.lambda$processGroupImports$1(ConfigurationClassParser.java:726)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:723)
	at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:694)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:398)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:283)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:745)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:565)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:730)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:432)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:59)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:47)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1386)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:543)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 72 common frames omitted
demo:0000 2024-08-11 23:09:12.303 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 23:09:12.355 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 39040 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 23:09:12.356 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 23:09:23.424 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:09:23.438 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:09:24.184 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:09:25.530 INFO  [] main c.i.z.d.a.s.properties.RulesShardingProperties:57 parseBindingTables completed. tableAndBindingTableMap -> {trans_record=[trans_record, pay_record], pay_record=[trans_record, pay_record]}
demo:0000 2024-08-11 23:09:25.740 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 23:09:25.996 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 23:09:25.999 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 23:09:26.222 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 23:09:26.491 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4e9bd2c8
demo:0000 2024-08-11 23:09:26.492 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 23:09:29.014 WARN  [] main c.i.z.d.artifact.shardingsphere.util.DatabaseUtil:37 to exec sql -> 
CREATE TABLE IF NOT EXISTS `trans_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `user_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '用户id',
  `trans_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '交易日期（yyyy-MM-dd）',
  `remark` VARCHAR ( 100 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '交易记录表' ROW_FORMAT = DYNAMIC;

CREATE TABLE IF NOT EXISTS `pay_record_202408` (
  `id` BIGINT ( 20 ) UNSIGNED NOT NULL COMMENT 'id',
  `pay_date` VARCHAR ( 10 ) CHARACTER
  SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '支付日期（yyyy-MM-dd）',
  `trans_id` BIGINT ( 20 ) NULL DEFAULT NULL COMMENT '交易id',
  `amount` DECIMAL ( 10, 2 ) NULL DEFAULT NULL COMMENT '支付金额',
  PRIMARY KEY ( `id` ) USING BTREE
) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '支付记录表' ROW_FORMAT = DYNAMIC;
demo:0000 2024-08-11 23:09:29.163 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"]}
demo:0000 2024-08-11 23:09:29.171 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:77 initRealTableName -> {"trans_record":["trans_record_202408"],"pay_record":["pay_record_202408"]}
demo:0000 2024-08-11 23:09:29.172 INFO  [] main c.i.z.d.a.s.support.LocalCacheShardingTableSupport:169 logicTable pay_record has done afterSingletonsInstantiated, skip.
demo:0000 2024-08-11 23:09:29.173 INFO  [] main c.i.z.d.a.s.support.RefreshActualDataNodesSupport:149 refresh actual-data-nodes to {trans_record=ds0.${['trans_record_202408']}, pay_record=ds0.${['pay_record_202408']}}
demo:0000 2024-08-11 23:09:29.413 INFO  [] main com.ideaaedi.zoo.foundation.guide.DIYGuidePrinter:51 Integrate component -> 01.zoo-diy-artifact-shardingsphere
demo:0000 2024-08-11 23:09:29.435 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 17.667 seconds (process running for 19.664)
demo:0000 2024-08-11 23:09:29.437 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 23:09:29.443 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 23:09:29.445 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 23:09:29.446 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 23:09:59.657 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 23:09:59.687 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 40660 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 23:09:59.688 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 23:10:00.936 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:10:00.954 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:10:01.555 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:10:02.508 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 23:10:02.747 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 23:10:02.748 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 23:10:02.886 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 23:10:03.018 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@48860139
demo:0000 2024-08-11 23:10:03.019 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 23:10:04.344 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.115 seconds (process running for 6.469)
demo:0000 2024-08-11 23:10:06.294 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.296 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.296 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822651708212518915, 1822651708212518914, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:10:06.331 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.332 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.332 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713203740673, 1822651713203740674, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:10:06.339 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:10:06.340 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.340 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822651713266655234, 张三]
demo:0000 2024-08-11 23:10:06.359 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 23:10:06.360 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:10:06.360 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 23:10:06.367 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 23:10:06.368 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:10:06.369 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 23:10:06.375 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 23:10:06.376 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:10:06.376 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 23:10:06.385 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.385 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.386 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713467981825, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 23:10:06.392 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.393 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.393 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713467981826, 1822651708212518914, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:10:06.399 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.400 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.400 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713530896386, 1822651713530896387, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:10:06.405 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:10:06.406 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.406 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822651708212518914, 张三]
demo:0000 2024-08-11 23:10:06.412 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.413 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.413 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713593810946, 1822651713593810947, 2023-06-06, 备注B]
demo:0000 2024-08-11 23:10:06.419 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.420 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.420 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713593810948, 1822651713593810946, 2023-06-06, 8.3]
demo:0000 2024-08-11 23:10:06.425 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.426 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.426 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713593810949, 1822651713593810946, 2023-07-06, 8.4]
demo:0000 2024-08-11 23:10:06.431 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:10:06.431 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.432 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822651713660919809, 1822651713593810946, 2023-10-06, 8.5]
demo:0000 2024-08-11 23:10:06.437 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:10:06.437 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:10:06.438 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822651713593810947, 李四]
demo:0000 2024-08-11 23:10:06.616 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:10:06.617 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 23:10:06.619 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:10:06.726 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 23:10:06.735 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 23:10:06.736 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 23:10:06.737 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 23:47:49.891 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 23:47:49.924 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 26604 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 23:47:49.925 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 23:48:32.406 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:48:32.420 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:48:37.260 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 23:48:37.285 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 31208 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 23:48:37.286 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 23:48:38.500 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:48:38.506 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:48:39.095 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:48:40.089 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 23:48:40.384 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 23:48:40.387 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 23:48:40.540 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 23:48:40.671 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@97b84a4
demo:0000 2024-08-11 23:48:40.671 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 23:48:41.815 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.008 seconds (process running for 6.161)
demo:0000 2024-08-11 23:48:43.214 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.214 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.215 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661427245391874, 1822661427245391873, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:48:43.242 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.243 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.243 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431066402817, 1822661431066402818, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:48:43.250 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:48:43.251 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.251 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661431066402819, 张三]
demo:0000 2024-08-11 23:48:43.271 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 23:48:43.272 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:48:43.273 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 23:48:43.279 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 23:48:43.280 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:48:43.281 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 23:48:43.287 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 23:48:43.289 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:48:43.290 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 23:48:43.304 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.304 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.305 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431267729410, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 23:48:43.310 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.314 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.315 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431330643970, 1822661427245391873, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:48:43.322 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.324 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.325 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431397752833, 1822661431397752834, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:48:43.338 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:48:43.339 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.339 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661427245391873, 张三]
demo:0000 2024-08-11 23:48:43.345 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.347 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.348 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431523581953, 1822661431523581954, 2023-06-06, 备注B]
demo:0000 2024-08-11 23:48:43.353 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.354 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.355 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431523581955, 1822661431523581953, 2023-06-06, 8.3]
demo:0000 2024-08-11 23:48:43.358 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.359 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.360 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431523581956, 1822661431523581953, 2023-07-06, 8.4]
demo:0000 2024-08-11 23:48:43.365 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:48:43.366 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.367 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661431586496513, 1822661431523581953, 2023-10-06, 8.5]
demo:0000 2024-08-11 23:48:43.370 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:48:43.371 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:48:43.372 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661431523581954, 李四]
demo:0000 2024-08-11 23:48:43.520 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:48:43.521 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 23:48:43.521 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:48:43.681 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 23:48:43.698 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 23:48:43.699 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 23:48:43.704 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
demo:0000 2024-08-11 23:49:28.169 INFO  [] background-preinit org.hibernate.validator.internal.util.Version:21 HV000001: Hibernate Validator 8.0.0.Final
demo:0000 2024-08-11 23:49:28.196 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:51 Starting ShardingTests using Java 17.0.3.1 with PID 27432 (started by 13548 in D:\working\spring-cloud-jd\zoo-example\zoo-example-springboot\zoo-example-springboot-shardingsphere)
demo:0000 2024-08-11 23:49:28.198 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:630 No active profile set, falling back to 1 default profile: "default"
demo:0000 2024-08-11 23:49:29.607 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:49:29.616 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:49:30.269 INFO  [] main o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker:409 Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
demo:0000 2024-08-11 23:49:31.525 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-1 - Starting...
demo:0000 2024-08-11 23:49:31.750 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:config user=SA
demo:0000 2024-08-11 23:49:31.752 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-1 - Start completed.
demo:0000 2024-08-11 23:49:31.953 INFO  [] main com.zaxxer.hikari.HikariDataSource:110 HikariPool-2 - Starting...
demo:0000 2024-08-11 23:49:32.071 INFO  [] main com.zaxxer.hikari.pool.HikariPool:565 HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@48860139
demo:0000 2024-08-11 23:49:32.071 INFO  [] main com.zaxxer.hikari.HikariDataSource:123 HikariPool-2 - Start completed.
demo:0000 2024-08-11 23:49:33.436 INFO  [] main c.i.z.e.springboot.shardingsphere.ShardingTests:57 Started ShardingTests in 5.76 seconds (process running for 6.918)
demo:0000 2024-08-11 23:49:34.752 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.753 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.753 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661643466031106, 1822661643466031105, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:49:34.784 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.786 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.787 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647240904705, 1822661647240904706, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:49:34.796 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:49:34.797 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.797 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661647303819265, 张三]
demo:0000 2024-08-11 23:49:34.821 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM trans_record
demo:0000 2024-08-11 23:49:34.823 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:49:34.825 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM trans_record
demo:0000 2024-08-11 23:49:34.831 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM pay_record
demo:0000 2024-08-11 23:49:34.833 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:49:34.834 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM pay_record
demo:0000 2024-08-11 23:49:34.840 INFO  [] main ShardingSphere-SQL:74 Logic SQL: DELETE FROM user_info
demo:0000 2024-08-11 23:49:34.842 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLDeleteStatement(super=DeleteStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty), orderBy=Optional.empty, limit=Optional.empty)
demo:0000 2024-08-11 23:49:34.843 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: DELETE FROM user_info
demo:0000 2024-08-11 23:49:34.861 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.862 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.863 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647496757250, 100, 2023-03-06, 备注X]
demo:0000 2024-08-11 23:49:34.867 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.869 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.869 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647563866114, 1822661643466031105, 2023-05-06, 备注A]
demo:0000 2024-08-11 23:49:34.875 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.878 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.881 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647630974978, 1822661647630974979, 2023-05-06, 2.5]
demo:0000 2024-08-11 23:49:34.886 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:49:34.888 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.889 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661643466031105, 张三]
demo:0000 2024-08-11 23:49:34.894 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.895 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=23, identifier=IdentifierValue(value=trans_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=26, stopIndex=60, columns=[ColumnSegment(startIndex=28, stopIndex=29, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=38, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=41, stopIndex=50, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=53, stopIndex=58, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=70, stopIndex=85, values=[ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=82, stopIndex=82, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.895 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO trans_record  ( id, user_id, trans_date, remark )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647698083842, 1822661647698083843, 2023-06-06, 备注B]
demo:0000 2024-08-11 23:49:34.899 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.901 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.901 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647698083844, 1822661647698083842, 2023-06-06, 8.3]
demo:0000 2024-08-11 23:49:34.905 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.905 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.906 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647765192706, 1822661647698083842, 2023-07-06, 8.4]
demo:0000 2024-08-11 23:49:34.909 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  )
demo:0000 2024-08-11 23:49:34.910 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=4, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=pay_record, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=24, stopIndex=57, columns=[ColumnSegment(startIndex=26, stopIndex=27, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=30, stopIndex=37, identifier=IdentifierValue(value=trans_id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=47, identifier=IdentifierValue(value=pay_date, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=50, stopIndex=55, identifier=IdentifierValue(value=amount, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=67, stopIndex=82, values=[ParameterMarkerExpressionSegment(startIndex=70, stopIndex=70, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=73, stopIndex=73, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=76, stopIndex=76, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=79, stopIndex=79, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.911 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO pay_record  ( id, trans_id, pay_date, amount )  VALUES (  ?, ?, ?, ?  ) ::: [1822661647765192707, 1822661647698083842, 2023-10-06, 8.5]
demo:0000 2024-08-11 23:49:34.915 INFO  [] main ShardingSphere-SQL:74 Logic SQL: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  )
demo:0000 2024-08-11 23:49:34.915 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=20, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=23, stopIndex=36, columns=[ColumnSegment(startIndex=25, stopIndex=26, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=29, stopIndex=34, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=46, stopIndex=55, values=[ParameterMarkerExpressionSegment(startIndex=49, stopIndex=49, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=52, stopIndex=52, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
demo:0000 2024-08-11 23:49:34.917 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: INSERT INTO user_info  ( id, `name` )  VALUES (  ?, ?  ) ::: [1822661647698083843, 李四]
demo:0000 2024-08-11 23:49:35.091 INFO  [] main ShardingSphere-SQL:74 Logic SQL: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:49:35.091 INFO  [] main ShardingSphere-SQL:74 SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=176, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=23, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=19, stopIndex=20, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=48, stopIndex=56, identifier=IdentifierValue(value=name, quoteCharacter=BACK_QUOTE), owner=Optional[OwnerSegment(startIndex=48, stopIndex=49, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[userName]), ColumnProjectionSegment(column=ColumnSegment(startIndex=83, stopIndex=87, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=83, stopIndex=84, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transId]), ColumnProjectionSegment(column=ColumnSegment(startIndex=113, stopIndex=125, identifier=IdentifierValue(value=trans_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=113, stopIndex=114, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transDate]), ColumnProjectionSegment(column=ColumnSegment(startIndex=153, stopIndex=161, identifier=IdentifierValue(value=remark, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=153, stopIndex=154, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional[transRemark])], distinctRow=false), from=JoinTableSegment(startIndex=203, stopIndex=287, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=203, stopIndex=216, identifier=IdentifierValue(value=trans_record, quoteCharacter=BACK_QUOTE)), owner=Optional.empty, alias=Optional[tr]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=251, stopIndex=259, identifier=IdentifierValue(value=user_info, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[ui]), condition=BinaryOperationExpression(startIndex=270, stopIndex=287, left=ColumnSegment(startIndex=270, stopIndex=279, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=270, stopIndex=271, identifier=IdentifierValue(value=tr, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=283, stopIndex=287, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=283, stopIndex=284, identifier=IdentifierValue(value=ui, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=tr.user_id = ui.id), using=[]), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combine=Optional.empty), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
demo:0000 2024-08-11 23:49:35.093 INFO  [] main ShardingSphere-SQL:74 Actual SQL: ds0 ::: SELECT
            ui.id as userId,
            ui.`name` as userName,
            tr.id as transId,
            tr.trans_date as transDate,
            tr.remark as transRemark
        FROM
            `trans_record` AS tr
                INNER JOIN user_info AS ui ON tr.user_id = ui.id
demo:0000 2024-08-11 23:49:35.253 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-2 - Shutdown initiated...
demo:0000 2024-08-11 23:49:35.275 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-2 - Shutdown completed.
demo:0000 2024-08-11 23:49:35.277 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:350 HikariPool-1 - Shutdown initiated...
demo:0000 2024-08-11 23:49:35.278 INFO  [] SpringApplicationShutdownHook com.zaxxer.hikari.HikariDataSource:352 HikariPool-1 - Shutdown completed.
